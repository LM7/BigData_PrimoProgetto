
\*
*  Mapper che associa a ciascun prodotto del file di input il valore 1
*\

Map(key, text):
for each line l in text:              \\per ogni riga del file di input
	for each product p in line:   \\per ogni prodotto di ogni riga
		Emit(p, 1);	      \\associa il valore 1


\*
*  Reducer che somma per ciascun prodotto le occorrenze rilevate
*\
Reduce(key, counts[]):            
occ = 0;		      \\inizializza il contatore a 0
for each c in counts:	      \\per ogni istanza in counts
	occ += c;             \\aggiorna il contatore
Emit(key, occ);               \\associa a ciascun prodotto il numero di occorrenze d'acquisto


\*
*  Mapper che inverte i parametri delle coppie (prodotto,occorrenze) e inverte il segno delle occorrenze
*  (Tali operazioni sono state implementate perchè un ordinamento sulle chiavi in ordine crescente viene già eseguito)
*\

MapSort(key, text):		 
for each pair p in text:	   \\per ogni coppia (prodotto,occorrenze) del file di input
	p->occ= (p->occ)*-1;	   \\inverto il segno delle occorrenze
	Emit(p->occ,p->product);   \\ricreo l'associazione invertendo i valori della coppia


\*
* Reducer che inverte nuovamente i parametri delle coppie e il valore delle occorrenze per generare l'ordinamento finale
*\

ReduceSort(key,product)	
key=key*-1;		\\riporto il segno delle occorrenze al valore positivo
Emit(product,key);	\\creo l'associazione finale ordinata

	





